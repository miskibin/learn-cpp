"use strict";(self.webpackChunkcpp_learn=self.webpackChunkcpp_learn||[]).push([[535],{9724:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var t=r(4848),o=r(8453);const s={},c="Operators",a={id:"operators",title:"Operators",description:"=, new, delete, ==, +=, etc.",source:"@site/docs/18-operators.md",sourceDirName:".",slug:"/operators",permalink:"/learn-cpp/docs/operators",draft:!1,unlisted:!1,editUrl:"https://github.com/michalskibinski109/learn-cpp/tree/main/docs/18-operators.md",tags:[],version:"current",sidebarPosition:18,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Classes and structures",permalink:"/learn-cpp/docs/classes_and_structs"},next:{title:"\ud83d\udd17 Interfaces in C++",permalink:"/learn-cpp/docs/interfaces"}},i={},l=[];function p(n){const e={admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",p:"p",pre:"pre",...(0,o.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:"operators",children:"Operators"}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:"="}),", ",(0,t.jsx)(e.code,{children:"new"}),", ",(0,t.jsx)(e.code,{children:"delete"}),", ",(0,t.jsx)(e.code,{children:"=="}),", ",(0,t.jsx)(e.code,{children:"+="}),", etc."]}),"\n"]}),"\n",(0,t.jsx)(e.admonition,{title:"It is just like dunder methods in Python",type:"tip",children:(0,t.jsx)(e.p,{children:"In C++, operators are implemented as functions. These functions can be overloaded to work with user-defined types."})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-cpp",children:"struct Vector2\n{\n    float x, y;\n    Vector2(float x = 0, float y = 0)\n        : x(x), y(y) {}\n\n    // Arithmetic operators\n    Vector2 operator+(const Vector2& rhs) const {\n        return Vector2(x + rhs.x, y + rhs.y);\n    }\n\n    Vector2 operator-(const Vector2& rhs) const {\n        return Vector2(x - rhs.x, y - rhs.y);\n    }\n\n    Vector2 operator*(const float scalar) const {\n        return Vector2(x * scalar, y * scalar);\n    }\n\n    Vector2 operator/(const float scalar) const {\n        return Vector2(x / scalar, y / scalar);\n    }\n\n    // Compound assignment operators\n    Vector2& operator+=(const Vector2& rhs) {\n        x += rhs.x;\n        y += rhs.y;\n        return *this;\n    }\n\n    Vector2& operator-=(const Vector2& rhs) {\n        x -= rhs.x;\n        y -= rhs.y;\n        return *this;\n    }\n\n    Vector2& operator*=(const float scalar) {\n        x *= scalar;\n        y *= scalar;\n        return *this;\n    }\n\n    Vector2& operator/=(const float scalar) {\n        x /= scalar;\n        y /= scalar;\n        return *this;\n    }\n\n    // Comparison operators\n    bool operator==(const Vector2& rhs) const {\n        return x == rhs.x && y == rhs.y;\n    }\n\n    bool operator!=(const Vector2& rhs) const {\n        return !(*this == rhs);\n    }\n};\n"})}),"\n",(0,t.jsx)(e.p,{children:"Usage:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-cpp",children:"Vector2 a(1.0f, 2.0f);\nVector2 b(2.0f, 3.0f);\n\nVector2 c = a + b; // c = (3.0f, 5.0f)\nVector2 d = a - b; // d = (-1.0f, -1.0f)\nVector2 e = a * 2.0f; // e = (2.0f, 4.0f)\nVector2 f = a / 2.0f; // f = (0.5f, 1.0f)\n"})})]})}function d(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(p,{...n})}):p(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>c,x:()=>a});var t=r(6540);const o={},s=t.createContext(o);function c(n){const e=t.useContext(s);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:c(n.components),t.createElement(s.Provider,{value:e},n.children)}}}]);