"use strict";(self.webpackChunkcpp_learn=self.webpackChunkcpp_learn||[]).push([[976],{1810:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>h});var t=r(4848),s=r(8453),a=r(1470),c=r(9365);const i={},l="Strings and string literals",o={id:"strings",title:"Strings and string literals",description:"Char",source:"@site/docs/13-strings.mdx",sourceDirName:".",slug:"/strings",permalink:"/learn-cpp/docs/strings",draft:!1,unlisted:!1,editUrl:"https://github.com/michalskibinski109/learn-cpp/tree/main/docs/13-strings.mdx",tags:[],version:"current",sidebarPosition:13,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"References in C++",permalink:"/learn-cpp/docs/references"},next:{title:"Copying and Moving",permalink:"/learn-cpp/docs/copying"}},d={},h=[{value:"Char",id:"char",level:2},{value:"Modyfying char array",id:"modyfying-char-array",level:3},{value:"String",id:"string",level:2},{value:"Adding strings to each other",id:"adding-strings-to-each-other",level:4},{value:"Chars:",id:"chars",level:2},{value:"Strings",id:"strings",level:2}];function u(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"strings-and-string-literals",children:"Strings and string literals"}),"\n",(0,t.jsx)(n.h2,{id:"char",children:"Char"}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"char"})," is a single byte of data, which can represent a single character. In C++, a ",(0,t.jsx)(n.code,{children:"char"})," can be used to represent a character or a small integer. The ASCII table is a common way to map characters to integers. For example, the ASCII value of 'A' is 65, and 'a' is 97."]}),"\n",(0,t.jsx)(n.p,{children:"Sure, here's how you can add tabs to your MDX file. The first tab will contain your current code, and the second tab will contain an example of an array of characters:"}),"\n",(0,t.jsxs)(a.A,{defaultValue:"tab1",values:[{label:"Single Character",value:"tab1"},{label:"Array of Characters",value:"tab2"}],children:[(0,t.jsx)(c.A,{value:"tab1",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"char character = 'A';\n\nstd::cout << character << std::endl;  // A\nstd::cout << (int)character << std::endl;  // 65\n"})})}),(0,t.jsx)(c.A,{value:"tab2",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'char *characters = "Hello, World!";\n// char characters[] = "Hello, World!";\n\nstd::cout << characters << std::endl;  // Hello, World!\n'})})})]}),"\n",(0,t.jsxs)(n.admonition,{type:"tip",children:[(0,t.jsxs)(n.mdxAdmonitionTitle,{children:["what is difference between ",(0,t.jsx)(n.code,{children:"char *str"})," and ",(0,t.jsx)(n.code,{children:"char str[]"}),"?"]}),(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"char *str"})," is a pointer to a character, while ",(0,t.jsx)(n.code,{children:"char str[]"})," is an array of characters. The main difference is that ",(0,t.jsx)(n.code,{children:"char *str"})," is a pointer that can be reassigned to point to different memory locations, while ",(0,t.jsx)(n.code,{children:"char str[]"})," is an array that has a fixed size and cannot be reassigned."]})]}),"\n",(0,t.jsx)(n.h3,{id:"modyfying-char-array",children:"Modyfying char array"}),"\n",(0,t.jsx)(n.p,{children:"Good:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"char name[] = \"John\";\nname[0] = 'M';\nstd::cout << name << std::endl;  // Mohn\n"})}),"\n",(0,t.jsx)(n.p,{children:"Bad (undefined behavior):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"char *name = \"John\";\nname[0] = 'M';  // Error: assignment of read-only location\n"})}),"\n",(0,t.jsx)(n.h2,{id:"string",children:"String"}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"string"})," is a sequence of characters. In C++, strings are represented by the ",(0,t.jsx)(n.code,{children:"std::string"})," class, which is part of the C++ Standard Library. You can create a string by enclosing characters in double quotes."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'#include <string>\n\nstd::string name = "John Doe";\n\nstd::cout << name << std::endl;  // John Doe\n'})}),"\n",(0,t.jsxs)(n.p,{children:["How does computer know where the string ends?\nThe computer knows where the string ends by using a null-terminator character (",(0,t.jsx)(n.code,{children:"\\0"}),"). The null-terminator is a special character that marks the end of a string. When the computer encounters a null-terminator, it knows that the string has ended."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"char str[2] = {'H', 'I'};\nstd::cout << str << std::endl;  // HI\ufffdp\ufffd\ufffd\ufffd\nchar str2[3] = {'H', 'I', '\\0'}; // \\0 is the null-terminator\nstd::cout << str2 << std::endl;  // HI\n"})}),"\n",(0,t.jsx)(n.h4,{id:"adding-strings-to-each-other",children:"Adding strings to each other"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'std::string name = "John" + "Doe";  // Error: John is not considered as a string\nstd::string firstName = "John";\nfirstName += " Doe";  // John Doe (string has `+=` operator)\nstd::string name = string("John") + "Doe"; // also works\n'})}),"\n",(0,t.jsx)(n.h1,{id:"string-literals",children:"String literals"}),"\n",(0,t.jsx)(n.h2,{id:"chars",children:"Chars:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'const wchar_t* wstr = L"Wide string"; // 2 bytes per character (Windows) 4 bytes (Linux)\nconst char16_t* u16str = u"UTF-16 string"; // 2 bytes per character\nconst char32_t* u32str = U"UTF-32 string";\n'})}),"\n",(0,t.jsx)(n.h2,{id:"strings",children:"Strings"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'using namespace std::string_literals;\n\nstd::string str = "Hello, World!"s + " I am a string"s;//this works! It is string now.\n'})}),"\n",(0,t.jsxs)(n.p,{children:["A string literal in C++ is a sequence of characters (including any escape sequences) surrounded by double quotes, optionally prefixed by ",(0,t.jsx)(n.code,{children:"R"}),", ",(0,t.jsx)(n.code,{children:"u8"}),", ",(0,t.jsx)(n.code,{children:"u"}),", ",(0,t.jsx)(n.code,{children:"U"}),", ",(0,t.jsx)(n.code,{children:"L"}),"."]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Prefix"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Use Cases"}),(0,t.jsx)(n.th,{children:"Example"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"None (Regular)"}),(0,t.jsxs)(n.td,{children:["A sequence of characters. Can include escape sequences like ",(0,t.jsx)(n.code,{children:"\\n"})," for a newline."]}),(0,t.jsx)(n.td,{children:"General purpose strings."}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"Hello, World!\\n"'})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"R"})," (Raw)"]}),(0,t.jsx)(n.td,{children:"A sequence of characters that doesn't process escape sequences."}),(0,t.jsx)(n.td,{children:"Strings that contain a lot of backslashes, such as regular expressions or Windows paths."}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'R"(C:\\Users\\Username\\Documents)"'})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"u8"})," (UTF-8)"]}),(0,t.jsx)(n.td,{children:"A sequence of UTF-8 encoded characters."}),(0,t.jsx)(n.td,{children:"Working with Unicode text in a space-efficient manner."}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'u8"\u3053\u3093\u306b\u3061\u306f"'})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"u"})," (UTF-16)"]}),(0,t.jsx)(n.td,{children:"A sequence of UTF-16 encoded characters."}),(0,t.jsx)(n.td,{children:"Working with Unicode text when you need more than the ASCII range but less than full Unicode."}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'u"\\u00B1"'})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"U"})," (UTF-32)"]}),(0,t.jsx)(n.td,{children:"A sequence of UTF-32 encoded characters."}),(0,t.jsx)(n.td,{children:"Working with Unicode text when you need to represent any Unicode character."}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'U"\\U0001F600"'})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"L"})," (Wide)"]}),(0,t.jsx)(n.td,{children:"A sequence of wide characters."}),(0,t.jsx)(n.td,{children:"APIs that support international text, where each character may be more than one byte."}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'L"\u041f\u0440\u0438\u0432\u0435\u0442"'})})]})]})]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},9365:(e,n,r)=>{r.d(n,{A:()=>c});r(6540);var t=r(4164);const s={tabItem:"tabItem_Ymn6"};var a=r(4848);function c(e){let{children:n,hidden:r,className:c}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,t.A)(s.tabItem,c),hidden:r,children:n})}},1470:(e,n,r)=>{r.d(n,{A:()=>w});var t=r(6540),s=r(4164),a=r(3104),c=r(6347),i=r(205),l=r(7485),o=r(1682),d=r(679);function h(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:r}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:r,attributes:t,default:s}}=e;return{value:n,label:r,attributes:t,default:s}}))}(r);return function(e){const n=(0,o.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,r])}function p(e){let{value:n,tabValues:r}=e;return r.some((e=>e.value===n))}function x(e){let{queryString:n=!1,groupId:r}=e;const s=(0,c.W6)(),a=function(e){let{queryString:n=!1,groupId:r}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:n,groupId:r});return[(0,l.aZ)(a),(0,t.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(s.location.search);n.set(a,e),s.replace({...s.location,search:n.toString()})}),[a,s])]}function g(e){const{defaultValue:n,queryString:r=!1,groupId:s}=e,a=u(e),[c,l]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=r.find((e=>e.default))??r[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:a}))),[o,h]=x({queryString:r,groupId:s}),[g,m]=function(e){let{groupId:n}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(n),[s,a]=(0,d.Dv)(r);return[s,(0,t.useCallback)((e=>{r&&a.set(e)}),[r,a])]}({groupId:s}),j=(()=>{const e=o??g;return p({value:e,tabValues:a})?e:null})();(0,i.A)((()=>{j&&l(j)}),[j]);return{selectedValue:c,selectValue:(0,t.useCallback)((e=>{if(!p({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);l(e),h(e),m(e)}),[h,m,a]),tabValues:a}}var m=r(2303);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=r(4848);function b(e){let{className:n,block:r,selectedValue:t,selectValue:c,tabValues:i}=e;const l=[],{blockElementScrollPositionUntilNextRender:o}=(0,a.a_)(),d=e=>{const n=e.currentTarget,r=l.indexOf(n),s=i[r].value;s!==t&&(o(n),c(s))},h=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const r=l.indexOf(e.currentTarget)+1;n=l[r]??l[0];break}case"ArrowLeft":{const r=l.indexOf(e.currentTarget)-1;n=l[r]??l[l.length-1];break}}n?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":r},n),children:i.map((e=>{let{value:n,label:r,attributes:a}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>l.push(e),onKeyDown:h,onClick:d,...a,className:(0,s.A)("tabs__item",j.tabItem,a?.className,{"tabs__item--active":t===n}),children:r??n},n)}))})}function y(e){let{lazy:n,children:r,selectedValue:s}=e;const a=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===s));return e?(0,t.cloneElement)(e,{className:"margin-top--md"}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function v(e){const n=g(e);return(0,f.jsxs)("div",{className:(0,s.A)("tabs-container",j.tabList),children:[(0,f.jsx)(b,{...n,...e}),(0,f.jsx)(y,{...n,...e})]})}function w(e){const n=(0,m.A)();return(0,f.jsx)(v,{...e,children:h(e.children)},String(n))}},8453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>i});var t=r(6540);const s={},a=t.createContext(s);function c(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);