"use strict";(self.webpackChunkcpp_learn=self.webpackChunkcpp_learn||[]).push([[387],{2741:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>o});var n=i(4848),t=i(8453);const r={},c="Visibility in classes",a={id:"visibility",title:"Visibility in classes",description:"In C++, classes have three types of visibility: public, protected, and private. These keywords determine how class members are accessible from outside the class.",source:"@site/docs/10-visibility.md",sourceDirName:".",slug:"/visibility",permalink:"/learn-cpp/docs/visibility",draft:!1,unlisted:!1,editUrl:"https://github.com/michalskibinski109/learn-cpp/tree/main/docs/10-visibility.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udd17 Interfaces in C++",permalink:"/learn-cpp/docs/interfaces"},next:{title:"Implicit and Explicit Conversion",permalink:"/learn-cpp/docs/implicit_and_explicit"}},l={},o=[{value:"Protected members",id:"protected-members",level:3},{value:"Friend classes",id:"friend-classes",level:4}];function d(e){const s={admonition:"admonition",code:"code",h1:"h1",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h1,{id:"visibility-in-classes",children:"Visibility in classes"}),"\n",(0,n.jsxs)(s.p,{children:["In C++, classes have three types of visibility: ",(0,n.jsx)(s.code,{children:"public"}),", ",(0,n.jsx)(s.code,{children:"protected"}),", and ",(0,n.jsx)(s.code,{children:"private"}),". These keywords determine how class members are accessible from outside the class."]}),"\n",(0,n.jsx)(s.p,{children:"Private members are only accessible from within the class itself. Protected members are accessible from within the class and its derived classes. Public members are accessible from anywhere."}),"\n",(0,n.jsx)(s.admonition,{title:"Does visibility affect program performance?",type:"tip",children:(0,n.jsx)(s.p,{children:"No, visibility doesn't affect program performance. It's only a design choice to control access to class members."})}),"\n",(0,n.jsx)(s.h3,{id:"protected-members",children:"Protected members"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-cpp",children:"class Entity {\n    int privateInt; // Private member (by default)\nprotected:\n        int x, y;\n};\n\nclass Player : public Entity {\npublic:\n        Player() {\n                x = 2; // Accessible\n                y = 3; // Accessible\n        }\n};\n\nint main() {\n        Player player;\n        player.x = 5; // Error: x is protected\n        player.y = 5; // Error: y is protected\n}\n\n"})}),"\n",(0,n.jsx)(s.h4,{id:"friend-classes",children:"Friend classes"}),"\n",(0,n.jsx)(s.p,{children:"Friend classes can access private and protected members of a class. Here's an example:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-cpp",children:'class Entity {\nprivate:\n        int x, y;\n        friend class Player;// it can access private members of Entity\n};\n\nclass Player {\npublic:\n        Entity e;\n        void Print() {\n                std::cout << e.x << ", " << e.y << std::endl; // Accessible\n        }\n};\n'})})]})}function p(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,s,i)=>{i.d(s,{R:()=>c,x:()=>a});var n=i(6540);const t={},r=n.createContext(t);function c(e){const s=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),n.createElement(r.Provider,{value:s},e.children)}}}]);